@using FPLSP_Analyst.Application.Interfaces.Repositories.ReadOnly
@using FPLSP_Analyst.BlazorServer.Extensions;
@inherits LayoutComponentBase

@inject ICurrentUser _currentUser
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService _dialogService;
@inject IHttpContextAccessor _httpContextAccessor
@inject IConfiguration _configuration

<MudThemeProvider Theme="_customTheme" />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
    
            <nav class="text-right fr" @onclick="() => Profile()" id="profile" title="Thông tin">
                <div class="nav-item dropdown no-arrow w-100 ">
                    <a class="nav-link dropdown-toggle pr-0" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                        <span>
                            <img class="image-profile img-v-align" src="@_currentUser.Picture">
                        </span>
                        <span class="mr-2 profile-head text-wrap " style="color:#fff;font-weight: 500;">
                            @_currentUser.Email
                            <br />
                            <span class="profile-head text-wrap">
                                @foreach (var role in roles)
                                {
                                    <span class="badge" style="font-size: 0.55em;background: black;">@role</span>
                                }
                            </span>
                        </span>
                    </a>

                    <!-- Dropdown - User Information -->
                    <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in @isShowProfile" aria-labelledby="userDropdown">
                        <a class="dropdown-item" @onclick="HrefProfile">
                            <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                            Hồ sơ cá nhân
                        </a>
                        <a class="dropdown-item" @onclick="HrefResetPass">
                            <i class="fa-solid fa-unlock-keyhole mr-2"></i>
                            Đổi mật khẩu
                        </a>
                        <a class="dropdown-item" @onclick="HrefRequest">
                            <i class="fa-solid fa-paper-plane mr-2"></i>
                            Gửi yêu cầu truy cập
                        </a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" @onclick="Logout" data-toggle="logout">
                            <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                            Đăng xuất
                        </a>
                    </div>
                </div>
            </nav>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Color="Color.Primary" Typo="Typo.h6">FPLSP_Analyst</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-2 pt-8">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}

@code {
    private List<string> roles = new();
    private string isShowProfile = "";
    private string token = "";
    private string url = "";
    private void HrefProfile()
    {
        _navigationManager.NavigateTo(url + "/Account/UpdateProfile?token=" + token, true);
    }
    private void HrefResetPass()
    {
        _navigationManager.NavigateTo(url + "/Account/ResetPassword?token=" + token, true);
    }
    private void HrefRequest()
    {
        _navigationManager.NavigateTo(url + "/Request/Index?token=" + token, true);
    }
    private async Task Logout()
    {
        var confirm = await Confirm();
        if (confirm == true)
        {
            _navigationManager.NavigateTo("Account/Logout", true);
        }
    }

    private async Task<bool?> Confirm()
    {
        var confirm = await _dialogService.ShowMessageBox(
            "Thông báo",
                    "Bạn chắc chắn muốn đăng xuất?",
           yesText: "Đăng xuất",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true });
        StateHasChanged();
        return confirm;
    }
    protected override async Task OnInitializedAsync()
    {
        url = _configuration["IdentityURLLOGIN"] ?? "";
        // lấy token từ cookie
        token = _httpContextAccessor.HttpContext?.Request.Cookies["token"] ?? "";
        roles = _currentUser.RoleCodes ?? new List<string>();
    }
    private void Profile()
    {
        if (string.IsNullOrEmpty(isShowProfile))
        {
            isShowProfile = "show";
        }
        else
        {
            isShowProfile = "";
        }
    }
   
    private MudTheme _customTheme = new()
        {
            Palette = new Palette()
            {
                Primary = CustomPalette.MainColor
            }
        };
}