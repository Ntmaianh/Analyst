@using FPLSP_Analyst.Application.Interfaces.Repositories.ReadOnly;
@using FPLSP_Analyst.Application.Interfaces.Repositories.ReadWrite;
@using FPLSP_Analyst.Application.ViewModels.Excels.Mics;
@inject ISnackbar _mudSnackbar
@inject IFileHandlingReadOnlyRepository _repoReadOnlyFileHandling
@inject IFileHandlingReadWriteRepository _repoReadWriteFileHandling
@inject IJSRuntime _jsRuntime;

<style>
    .file-hover:hover {
        text-decoration: underline;
    }
</style>

<MudOverlay @bind-Visible="@Enable" ZIndex="1301" LightBackground="true">
    <MudCard Class="pa-5">
        <div>
            <div class="d-flex align-items-center">
                <MudText Typo="Typo.h6" Class="mr-auto" Style="font-weight: 600;">Tải lên tài liệu</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="@(async () => { await OnClose.InvokeAsync(); })"></MudIconButton>
            </div>
            <div>
                <MudFileUpload T="IBrowserFile" FilesChanged="@(async (IBrowserFile f) => await UploadFile(f))" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0" @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                    <ButtonTemplate>
                        <MudPaper Outlined="true" Class="@(DragClass)">
                            <div class="w-100 d-flex justify-content-center">
                                <MudIcon Icon="@Icons.Material.Filled.DriveFileMove" Style="font-size: 10rem;" Color="Color.Default"></MudIcon>
                            </div>
                            <MudText Typo="Typo.h6" Color="Color.Default">Kéo thả hoặc nhấn vào đây để chọn</MudText>
                        </MudPaper>
                    </ButtonTemplate>
                </MudFileUpload>
            </div>
            @if(listFileResult.Count() > 0)
            {
                <MudText Typo="Typo.subtitle2" Class="mt-2">Kết quả: </MudText>
                <ul>
                    @foreach(var i in listFileResult)
                    {
                        if(i.Item2)
                        {
                            if (!i.Item3)
                            {
                                Console.WriteLine();
                                <li><MudText Typo="Typo.caption" Color="Color.Success" Class="file-hover" @onclick="@(async () => await DownloadFile(i.Item1))">@i.Item1</MudText></li>
                            }
                            else
                            {
                                <li><MudText Typo="Typo.caption" Color="Color.Error" Class="file-hover" @onclick="@(async () => await DownloadFile(i.Item1))">@i.Item1</MudText></li>
                            }
                        }
                        else
                        {
                            <li><MudText Typo="Typo.caption" Color="Color.Error" Class="file-hover">@i.Item1</MudText></li>
                        }
                    }
                    @for(int i = 1; i <= listFileLoading; i++)
                    {
                        <li><MudProgressLinear Indeterminate></MudProgressLinear></li>   
                    }
                </ul>
            }
        </div>
    </MudCard>
</MudOverlay>

@code {
    [Parameter]
    public bool Enable { get; set; } = false;

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback LoadDataMain { get; set; }

    [Parameter]
    public string Function { get; set; }

    [Parameter]
    public List<ExcelParameterVM> Parameters { get; set; } = new();

    List<(string, bool, bool)> listFileResult = new();
    private int listFileLoading = 0;

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task UploadFile(IBrowserFile browserFile)
    {
        //Convert IBrowserFile > byte[]
        var memoryStream = new MemoryStream();
        await browserFile.OpenReadStream().CopyToAsync(memoryStream);

        listFileLoading++;
        StateHasChanged();

        //Gửi về API & Lấy KQ
        var handlingResult = await _repoReadWriteFileHandling.ExcelImport(new()
            {
                Function = Function,
                FileName = browserFile.Name,
                FileData = memoryStream.ToArray(),
                Parameters = Parameters
            });
        if(handlingResult.IsSuccess)
        {
            LoadDataMain.InvokeAsync();
            listFileResult.Add((handlingResult.FileName, handlingResult.IsSuccess,handlingResult.IsError));
        }
        else
        {
            listFileResult.Add(("Xử lý thất bại", handlingResult.IsSuccess,false));
        }
        listFileLoading--;
    }

    private async Task DownloadFile(string FileName)
    {
        var fileStream = await _repoReadOnlyFileHandling.GetFileStreamAsync(FileName, "Excels/Handled");

        var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);

        await _jsRuntime.InvokeAsync<object>("saveAsFile", FileName,
            Convert.ToBase64String(memoryStream.ToArray()));
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
} 
