
@page "/subject/indicator"
@using FPLSP_Analyst.Application.DataTransferObjects.ForSelect
@using FPLSP_Analyst.Application.DataTransferObjects.SubjectIndicator.Request;
@using FPLSP_Analyst.Application.DataTransferObjects.SubjectIndicator;
@using FPLSP_Analyst.Application.Interfaces.Repositories.ReadOnly;
@using FPLSP_Analyst.Application.Interfaces.Services;
@using FPLSP_Analyst.Application.ValueObjects.Pagination;
@using FPLSP_Analyst.Infrastructure.ViewModels.ForSelect
@using FPLSP_Analyst.Infrastructure.ViewModels.SubjectIndicator;
@using static FPLSP_Analyst.Application.ValueObjects.Common.QueryConstant
@*@attribute [Authorize(Roles = "ADMIN")]*@

<MudText Color="Color.Primary" Class="mb-5" Typo="Typo.h4">Thông tin chỉ số của môn học</MudText>

@if (_hasError)
{
<MudAlert Severity="Severity.Error">Đã xảy ra lỗi khi tải dữ liệu.</MudAlert>
}
else 
if (_listSemesterForSelectDto == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else
{
    if (_listSemesterForSelectDto.Count == 0)
    {
        <MudAlert Severity="Severity.Warning">Không có dữ liệu</MudAlert>
    }
    else
    {
        <MudGrid Class="mb-3">
            <MudItem xs="12" md="3">
                <MudTextField T="string" @bind-Value="@_paginationRequest.SearchString" Label="Tìm kiếm" Placeholder="Theo mã, tên giảng viên" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"></MudTextField>
            </MudItem>
            <MudItem xs="12" md="2" lg="2">
                <MudSelect T="string" Label="Kì học" Value="@selectedSemesterId" ValueChanged="OnSelectedSemester">
                    @foreach (var semester in _listSemesterForSelectDto)
                    {
                        <MudSelectItem T="string" Value="@(semester.Id.ToString())">@semester.Code</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="2">
                <MudSelect T="string" Label="Chuyên ngành">
                    <MudSelectItem T="string" Value="@("UDPM")">UDPM</MudSelectItem>
                </MudSelect>
            </MudItem>
@*             <MudItem xs="12" md="3">
                <MudSelect @bind-Value="_paginationRequest.IndicatorField" Label="Lọc theo chỉ số">
                    <MudSelectItem Value="@OperatorTypes.GreaterThanOrEqual">@("Số sinh viên qua môn")</MudSelectItem>
                    <MudSelectItem Value="@OperatorTypes.GreaterThanOrEqual">@("Số sinh viên trượt")</MudSelectItem>
                    <MudSelectItem Value="@OperatorTypes.GreaterThanOrEqual">@("Số sinh viên cấm thi")</MudSelectItem>
                    <MudSelectItem Value="@OperatorTypes.GreaterThanOrEqual">@("Số sinh viên không đi thi")</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="1">
                <MudTextField T="float" @bind-Value="@_paginationRequest.IndicatorValueMin" Label="Từ"></MudTextField>
            </MudItem>
            <MudItem xs="12" md="1">
                <MudTextField T="float" @bind-Value="@_paginationRequest.IndicatorValueMax" Label="Đến"></MudTextField>
            </MudItem>
 *@        </MudGrid>
       
        if (_listSubjectIndicatorDto == null)
        {
            <MudAlert Severity="Severity.Warning">Không có dữ liệu</MudAlert>
        }
        else
        {
            <MudTable Items="@_listSubjectIndicatorDto" Hover="true" Striped="true" FixedHeader="true">

                <HeaderContent>
                    <MudTh>STT</MudTh>
                    <MudTh>Kỳ học</MudTh>
                    <MudTh>Mã môn</MudTh>
                    <MudTh>Tên môn</MudTh>
                    <MudTh>Chuyên ngành</MudTh>
                    <MudTh>Sinh viên qua môn</MudTh>
                    <MudTh>Sinh viên cấm thi</MudTh>
                    <MudTh>Sinh viên  trượt</MudTh>
                    <MudTh>Sinh viên không đi thi</MudTh>
                    @* <MudTh>Cần giải trình</MudTh> *@
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="STT">@(_listSubjectIndicatorDto.IndexOf(context) + 1)</MudTd>
                    <MudTd DataLabel="Kỳ học">@context.SemesterCode</MudTd>
                        <MudTd DataLabel="Mã môn">@context.SubjectCode</MudTd>
                        <MudTd DataLabel="Tên môn">@context.SubjectName</MudTd>
                        <MudTd DataLabel="Chuyên ngành">@context.MajorName</MudTd>
                        <MudTd DataLabel="Sinh viên qua môn">@context.StudentPassedNumber@("/")@context.StudentTotalNumber<br>@(" (")@context.StudentPassedPercent.ToString("0.00\\%\\)")</MudTd>
                        <MudTd DataLabel="Sinh viên cấm thi">@context.StudentBannedNumber@("/")@context.StudentTotalNumber<br>@(" (")@context.StudentBannedPercent.ToString("0.00\\%\\)")</MudTd>
                        <MudTd DataLabel="Sinh viên trượt">@context.StudentFailedNumber@("/")@context.StudentTotalNumber<br>@(" (")@context.StudentFailedPercent.ToString("0.00\\%\\)")</MudTd>
                        <MudTd DataLabel="Sinh viên không đi thi">@context.StudentMissedNumber</MudTd>
                        @* <MudTd DataLabel="" Style="text-align: center;"><MudIconButton Title="Yêu cầu giải trình" hidden="@(context.IsNeedExplanation)" Color="Color.Error" Icon="@Icons.Material.Filled.Mail" OnClick="()=>{}"></MudIconButton></MudTd> *@
                    </RowTemplate>
                    <PagerContent>
                        @if (_paginationResponse != null)
                        {
                        <MudGrid Class="mb-3">
                            <MudItem xs="12" Class="d-flex justify-center mt-3">
                                @if (_paginationResponse.PageNumber <= 1)
                                {
                                    <MudPagination Color="Color.Primary" BoundaryCount="1" Count="@(_paginationResponse!.HasNext? 2 : 1)" @bind-Selected="@_paginationRequest.PageNumber" />
                                }
                                else
                                {
                                    <MudPagination Color="Color.Primary" BoundaryCount="1" Count="@(_paginationResponse!.HasNext? (_paginationResponse.PageNumber + 1) : _paginationResponse.PageNumber)" @bind-Selected="@_paginationRequest.PageNumber" />
                                }
                            </MudItem>
                        </MudGrid>
                        }
                </PagerContent>
            </MudTable>
        }
    }
}


@code {

    [Inject]
    private ISubjectIndicatorReadOnlyRepository _subjectIndicatorReadOnlyRepository { get; set; }
    [Inject]
    ISemesterReadOnlyRepository _semesterReadOnlyRepository { get; set; }

    [Inject]
    private ILocalizationService _localizationService { get; set; }

    private CancellationToken _cancellationToken = default;
    ViewSubjectIndicatorWithPaginationRequest _paginationRequest = new();
    PaginationResponse<SubjectIndicatorDto> _paginationResponse { get; set; }
    
    private List<SubjectIndicatorDto>? _listSubjectIndicatorDto { get; set; }
    List<SemesterForSelectDto>? _listSemesterForSelectDto { get; set; }
    string? selectedSemesterId { get; set; }
    bool _hasError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSemesterForSelect();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            if (string.IsNullOrWhiteSpace(selectedSemesterId))
            {
                if (_listSemesterForSelectDto != null)
                {
                    if (_listSemesterForSelectDto!.Count > 0)
                    {
                        await OnSelectedSemester(_listSemesterForSelectDto.FirstOrDefault()!.Id.ToString());

                        StateHasChanged();
                    }
                }
            }
        }
    }

    async Task LoadSemesterForSelect()
    {
        SemesterForSelectViewModel vm = new(_semesterReadOnlyRepository, _localizationService);

        await vm.HandleAsync(new(), _cancellationToken);

        if (true)
        {
            _listSemesterForSelectDto = (List<SemesterForSelectDto>)vm.Data;
        }
        else
        {
            _hasError = true;
        }
    }

    async Task OnSelectedSemester(string idSemester)
    {
        selectedSemesterId = idSemester;
        _paginationRequest.SemesterId = Guid.Parse(idSemester);

        SubjectIndicatorListWithPaginationViewModel vm = new(_subjectIndicatorReadOnlyRepository, _localizationService);
        await vm.HandleAsync(_paginationRequest, _cancellationToken);
        if (vm.Success)
        {           
            _paginationResponse = (PaginationResponse<SubjectIndicatorDto>)vm.Data;

            _listSubjectIndicatorDto = _paginationResponse.Data!.ToList();
        }
        else
        {
            _hasError = true;
        }

    }
}
