@page "/class/indicator"
@using FPLSP_Analyst.Application.DataTransferObjects.Class.Request;
@using FPLSP_Analyst.Application.DataTransferObjects.Class;
@using FPLSP_Analyst.Application.DataTransferObjects.ClassIndicator.Request;
@using FPLSP_Analyst.Application.DataTransferObjects.ClassIndicator;
@using FPLSP_Analyst.Application.DataTransferObjects.ForSelect;
@using FPLSP_Analyst.Application.Interfaces.Repositories.ReadOnly;
@using FPLSP_Analyst.Application.Interfaces.Services;
@using FPLSP_Analyst.Application.ValueObjects.Pagination;
@using FPLSP_Analyst.Domain.Entities;
@using FPLSP_Analyst.Domain.Enums;
@using System.Linq;
@using FPLSP_Analyst.Infrastructure.ViewModels.Class;
@using FPLSP_Analyst.Infrastructure.ViewModels.ClassIndicator;
@using FPLSP_Analyst.Infrastructure.ViewModels.ForSelect;
@using static FPLSP_Analyst.Application.ValueObjects.Common.QueryConstant
@*@attribute [Authorize(Roles = "ADMIN")]*@

<MudText Color="Color.Primary" Class="mb-5" Typo="Typo.h4">Thông tin chỉ số các lớp</MudText>

@if(_paginationResponse == null)
{
    
}
else
{
    @if (_hasError)
    {
        <MudAlert Severity="Severity.Error">Đã xảy ra lỗi khi tải dữ liệu.</MudAlert>
    }
    else
if (_listSemesterForSelectDto == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        if (_listSemesterForSelectDto.Count == 0)
        {
            <MudAlert Severity="Severity.Warning">Không có dữ liệu</MudAlert>
        }
        else
        {
            <MudGrid Class="mb-3">
                <MudItem xs="12" md="3">
                    <MudTextField T="string" @bind-Value="@_paginationRequest.SearchString" Label="Tìm kiếm" Placeholder="Theo mã, tên giảng viên" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="2" lg="2">
                    <MudSelect T="string" Label="Kì học" Value="@selectedSemesterId" ValueChanged="OnSelectedSemester">
                        @foreach (var semester in _listSemesterForSelectDto)
                        {
                            <MudSelectItem T="string" Value="@(semester.Id.ToString())">@semester.Code</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="2">
                    <MudSelect T="string" Label="Chuyên ngành">
                        <MudSelectItem T="string" Value="@("UDPM")">UDPM</MudSelectItem>
                    </MudSelect>
                </MudItem>
                @*             <MudItem xs="12" md="3">
    <MudSelect @bind-Value="_paginationRequest.IndicatorField" Label="Lọc theo chỉ số">
    <MudSelectItem Value="@OperatorTypes.GreaterThanOrEqual">@("Số sinh viên qua môn")</MudSelectItem>
    <MudSelectItem Value="@OperatorTypes.GreaterThanOrEqual">@("Số sinh viên trượt")</MudSelectItem>
    <MudSelectItem Value="@OperatorTypes.GreaterThanOrEqual">@("Số sinh viên cấm thi")</MudSelectItem>
    <MudSelectItem Value="@OperatorTypes.GreaterThanOrEqual">@("Số sinh viên không đi thi")</MudSelectItem>
    </MudSelect>
    </MudItem>
    <MudItem xs="12" md="1">
    <MudTextField T="float" @bind-Value="@_paginationRequest.IndicatorValueMin" Label="Từ"></MudTextField>
    </MudItem>
    <MudItem xs="12" md="1">
    <MudTextField T="float" @bind-Value="@_paginationRequest.IndicatorValueMax" Label="Đến"></MudTextField>
    </MudItem>
    *@
            </MudGrid>

            if (_listClassIndicatorDto == null)
            {
                <MudAlert Severity="Severity.Warning">Không có dữ liệu</MudAlert>
            }
            else
            {
                <MudTable Items="@_listClassIndicatorDto" Hover="true" Striped="true" FixedHeader="true">
                    <HeaderContent>
                        <MudTh>STT</MudTh>
                        <MudTh>Kỳ học</MudTh>
                        <MudTh>Lớp</MudTh>
                        <MudTh>Mã môn</MudTh>
                        <MudTh>Tên môn</MudTh>
                        <MudTh>Giảng viên</MudTh>
                        <MudTh>Chuyên ngành</MudTh>
                        <MudTh>Tổng số sinh viên</MudTh>
                        <MudTh>Số sinh viên qua môn</MudTh>
                        <MudTh>Số sinh viên cấm thi</MudTh>
                        <MudTh>Số sinh viên trượt</MudTh>
                        @* <MudTh>Cần giải trình</MudTh> *@
                        @* <MudTh>Giải trình</MudTh> *@
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@(_listClassIndicatorDto.IndexOf(context) + 1)</MudTd>
                        <MudTd DataLabel="SemesterCode">@context.SemesterCode</MudTd>
                            <MudTd DataLabel="ClassCode">@context.ClassCode</MudTd>
                            <MudTd DataLabel="SubjectCode">@context.SubjectCode</MudTd>
                            <MudTd DataLabel="SubjectName">@context.SubjectName</MudTd>
                            <MudTd DataLabel="LecturerName">@context.LecturerName</MudTd>
                            <MudTd DataLabel="MajorName">@context.MajorName</MudTd>
                            <MudTd DataLabel="StudentTotalNumber">@context.StudentTotalNumber</MudTd>
                            <MudTd DataLabel="StudentPassedNumber">@context.StudentPassedNumber@("/")@context.StudentTotalNumber<br>@(" (")@context.StudentPassedNumber.ToString("0.00\\%\\)")</MudTd>
                            <MudTd DataLabel="StudentBannedNumber">@context.StudentBannedNumber@("/")@context.StudentTotalNumber<br>@(" (")@context.StudentBannedPercent.ToString("0.00\\%\\)")</MudTd>
                            <MudTd DataLabel="StudentFailedNumber">@context.StudentFailedNumber@("/")@context.StudentTotalNumber<br>@(" (")@context.StudentFailedNumber.ToString("0.00\\%\\)")</MudTd>
                            @* <MudTd DataLabel="" Style="text-align: center;"><MudIconButton Title="Yêu cầu giải trình" hidden="@(!context.IsNeedExplanation)" Color="Color.Error" Icon="@Icons.Material.Filled.Mail" OnClick="()=>{}"></MudIconButton></MudTd> *@
                            @* <MudTd DataLabel="Explanation">@context.Explanation</MudTd> *@
                        </RowTemplate>
                        <PagerContent>
                            <MudGrid Class="mb-3">
                                <MudItem xs="12" Class="d-flex justify-center mt-3">
                                    <MudPagination BoundaryCount="1" MiddleCount="1" ShowPreviousButton="true" ShowNextButton="true" Count="(_paginationResponse.HasNext ? (_paginationRequest.PageNumber + 1) : _paginationRequest.PageNumber)" SelectedChanged="OnSelectPagination" />
                                </MudItem>
                            </MudGrid>
                        </PagerContent>
                </MudTable>
            }
        }
    }
}

@code {
    [Inject]
    private IClassIndicatorReadOnlyRepository _classIndicatorReadOnlyRepository { get; set; }
    [Inject]
    private ILocalizationService _localizationService { get; set; }
    [Inject]
    ISemesterReadOnlyRepository _semesterReadOnlyRepository { get; set; }
    List<SemesterForSelectDto>? _listSemesterForSelectDto { get; set; }
    private CancellationToken _cancellationToken = default;
    ViewClassIndicatorWithPaginationRequest _paginationRequest = new();
    PaginationResponse<ClassIndicatorDto>? _paginationResponse { get; set; }
    bool _hasError = false;
    private string? selectedSemesterId;
    private List<ClassIndicatorDto>? _listClassIndicatorDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadSemesterForSelect();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            if (string.IsNullOrWhiteSpace(selectedSemesterId))
            {
                if (_listSemesterForSelectDto != null)
                {
                    if (_listSemesterForSelectDto!.Count > 0)
                    {
                        await OnSelectedSemester(_listSemesterForSelectDto.FirstOrDefault()!.Id.ToString());

                        StateHasChanged();
                    }
                }
            }
        }
    }

    private async Task LoadSemesterForSelect()
    {
        SemesterForSelectViewModel vm = new(_semesterReadOnlyRepository, _localizationService);
        await vm.HandleAsync(new(), _cancellationToken);
        if (true)
        {
            _listSemesterForSelectDto = (List<SemesterForSelectDto>)vm.Data;
        }
    }

    async Task OnSelectedSemester(string idSemester)
    {
        selectedSemesterId = idSemester;

        _paginationRequest.SemesterId = Guid.Parse(idSemester);

        await LoadData();
    }

    async Task LoadData()
    {
        ClassIndicatorListWithPaginationViewModel vm = new(_classIndicatorReadOnlyRepository, _localizationService);
        await vm.HandleAsync(_paginationRequest, _cancellationToken);
        if (vm.Success)
        {
            _paginationResponse = (PaginationResponse<ClassIndicatorDto>)vm.Data;
            _listClassIndicatorDto = _paginationResponse.Data!.ToList();
        }
    }

    async Task OnSelectPagination(int pageNumber)
    {
        _paginationRequest.PageNumber = pageNumber;
        await LoadData();
    }
}
