// <auto-generated />
using System;
using FPLSP_Analyst.Infrastructure.Database.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FPLSP_Analyst.Infrastructure.Migrations
{
    [DbContext(typeof(AppReadWriteDbContext))]
    [Migration("20240120035949_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.ClassIndicatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 1, 20, 3, 59, 49, 274, DateTimeKind.Unspecified).AddTicks(5602), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("StudentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("StudentFailedNumber")
                        .HasColumnType("int");

                    b.Property<float>("StudentFailedPercent")
                        .HasColumnType("real");

                    b.Property<int>("StudentPassedNumber")
                        .HasColumnType("int");

                    b.Property<float>("StudentPassedPercent")
                        .HasColumnType("real");

                    b.Property<int>("StudentTotalNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubjectEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectEntityId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClassIndicator", (string)null);
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.GroupConfigEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 1, 20, 3, 59, 49, 275, DateTimeKind.Unspecified).AddTicks(7895), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GroupConfig", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("27d13198-88c3-438c-ad10-e08d6bf7c4a4"),
                            Code = "Config_For_FA23",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.GroupIndicatorConfigEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 1, 20, 3, 59, 49, 276, DateTimeKind.Unspecified).AddTicks(356), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GroupConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IndicatorConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupConfigId");

                    b.HasIndex("IndicatorConfigId");

                    b.ToTable("GroupIndicatorConfig", (string)null);
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.IndicatorConfigEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 1, 20, 3, 59, 49, 276, DateTimeKind.Unspecified).AddTicks(4514), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Predication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Table")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IndicatorConfig", (string)null);
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.LecturerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 1, 20, 3, 59, 49, 276, DateTimeKind.Unspecified).AddTicks(6695), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MajorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TrainingFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.HasIndex("TrainingFacilityId");

                    b.ToTable("Lecturer", (string)null);
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.LecturerIndicatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassGreaterThan10PercentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("ClassGreaterThan10PercentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("ClassGreaterThan20PercentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("ClassGreaterThan20PercentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("ClassLessThan3PercentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("ClassLessThan3PercentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("ClassTotalNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 1, 20, 3, 59, 49, 276, DateTimeKind.Unspecified).AddTicks(8684), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("StudentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("StudentFailedNumber")
                        .HasColumnType("int");

                    b.Property<float>("StudentFailedPercent")
                        .HasColumnType("real");

                    b.Property<int>("StudentPassedNumber")
                        .HasColumnType("int");

                    b.Property<float>("StudentPassedPercent")
                        .HasColumnType("real");

                    b.Property<int>("StudentTotalNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("SemesterId");

                    b.ToTable("LecturerIndicator", (string)null);
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.MajorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 1, 20, 3, 59, 49, 277, DateTimeKind.Unspecified).AddTicks(640), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Major", (string)null);
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.MajorIndicatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassGreaterThan10PercentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("ClassGreaterThan10PercentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("ClassGreaterThan20PercentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("ClassGreaterThan20PercentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("ClassLessThan3PercentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("ClassLessThan3PercentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("ClassTotalNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 1, 20, 3, 59, 49, 277, DateTimeKind.Unspecified).AddTicks(2898), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MajorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("StudentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("StudentFailedNumber")
                        .HasColumnType("int");

                    b.Property<float>("StudentFailedPercent")
                        .HasColumnType("real");

                    b.Property<int>("StudentMissedNumber")
                        .HasColumnType("int");

                    b.Property<int>("StudentPassedNumber")
                        .HasColumnType("int");

                    b.Property<float>("StudentPassedPercent")
                        .HasColumnType("real");

                    b.Property<int>("StudentTotalNumber")
                        .HasColumnType("int");

                    b.Property<int>("SubjectGreaterThan10PercentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("SubjectGreaterThan10PercentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("SubjectGreaterThan20PercentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("SubjectGreaterThan20PercentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("SubjectLessThan3PercentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("SubjectLessThan3PercentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("SubjectTotalNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.HasIndex("SemesterId");

                    b.ToTable("MajorIndicator", (string)null);
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.SemesterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 1, 20, 3, 59, 49, 277, DateTimeKind.Unspecified).AddTicks(4950), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GroupConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupConfigId");

                    b.ToTable("Semester", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("27d13198-88c3-438c-ad10-e08d6bf7c4a4"),
                            Code = "FA23",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EndTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GroupConfigId = new Guid("27d13198-88c3-438c-ad10-e08d6bf7c4a4"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            StartTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 1
                        });
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.SubjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 1, 20, 3, 59, 49, 277, DateTimeKind.Unspecified).AddTicks(6716), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("MajorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrainingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.SubjectIndicatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 1, 20, 3, 59, 49, 277, DateTimeKind.Unspecified).AddTicks(9318), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentBannedNumber")
                        .HasColumnType("int");

                    b.Property<float>("StudentBannedPercent")
                        .HasColumnType("real");

                    b.Property<int>("StudentFailedNumber")
                        .HasColumnType("int");

                    b.Property<float>("StudentFailedPercent")
                        .HasColumnType("real");

                    b.Property<int>("StudentMissedNumber")
                        .HasColumnType("int");

                    b.Property<int>("StudentPassedNumber")
                        .HasColumnType("int");

                    b.Property<float>("StudentPassedPercent")
                        .HasColumnType("real");

                    b.Property<int>("StudentTotalNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectIndicator", (string)null);
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.TrainingFacilityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 1, 20, 3, 59, 49, 278, DateTimeKind.Unspecified).AddTicks(1282), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TrainingFacility", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("27d13198-88c3-438c-ad10-e08d6bf7c4a4"),
                            Code = "HN",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hà Nội",
                            Status = 1
                        });
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.ClassIndicatorEntity", b =>
                {
                    b.HasOne("FPLSP_Analyst.Domain.Entities.LecturerEntity", "Lecturer")
                        .WithMany("ClassIndicators")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPLSP_Analyst.Domain.Entities.SemesterEntity", "Semester")
                        .WithMany("ClassIndicators")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPLSP_Analyst.Domain.Entities.SubjectEntity", null)
                        .WithMany("ClassIndicators")
                        .HasForeignKey("SubjectEntityId");

                    b.HasOne("FPLSP_Analyst.Domain.Entities.SubjectEntity", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("Semester");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.GroupIndicatorConfigEntity", b =>
                {
                    b.HasOne("FPLSP_Analyst.Domain.Entities.GroupConfigEntity", "GroupConfig")
                        .WithMany("GroupIndicatorConfigs")
                        .HasForeignKey("GroupConfigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FPLSP_Analyst.Domain.Entities.IndicatorConfigEntity", "IndicatorConfig")
                        .WithMany("GroupIndicatorConfigs")
                        .HasForeignKey("IndicatorConfigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GroupConfig");

                    b.Navigation("IndicatorConfig");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.LecturerEntity", b =>
                {
                    b.HasOne("FPLSP_Analyst.Domain.Entities.MajorEntity", "Major")
                        .WithMany("Lecturers")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPLSP_Analyst.Domain.Entities.TrainingFacilityEntity", "TrainingFacility")
                        .WithMany("Lecturers")
                        .HasForeignKey("TrainingFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("TrainingFacility");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.LecturerIndicatorEntity", b =>
                {
                    b.HasOne("FPLSP_Analyst.Domain.Entities.LecturerEntity", "Lecturer")
                        .WithMany("LecturerIndicators")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPLSP_Analyst.Domain.Entities.SemesterEntity", "Semester")
                        .WithMany("LecturerIndicators")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.MajorIndicatorEntity", b =>
                {
                    b.HasOne("FPLSP_Analyst.Domain.Entities.MajorEntity", "Major")
                        .WithMany("MajorIndicators")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPLSP_Analyst.Domain.Entities.SemesterEntity", "Semester")
                        .WithMany("MajorIndicators")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.SemesterEntity", b =>
                {
                    b.HasOne("FPLSP_Analyst.Domain.Entities.GroupConfigEntity", "GroupConfig")
                        .WithMany("Semesters")
                        .HasForeignKey("GroupConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupConfig");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.SubjectEntity", b =>
                {
                    b.HasOne("FPLSP_Analyst.Domain.Entities.MajorEntity", "Major")
                        .WithMany("Subjects")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.SubjectIndicatorEntity", b =>
                {
                    b.HasOne("FPLSP_Analyst.Domain.Entities.SemesterEntity", "Semester")
                        .WithMany("SubjectIndicators")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPLSP_Analyst.Domain.Entities.SubjectEntity", "Subject")
                        .WithMany("SubjectIndicators")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semester");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.GroupConfigEntity", b =>
                {
                    b.Navigation("GroupIndicatorConfigs");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.IndicatorConfigEntity", b =>
                {
                    b.Navigation("GroupIndicatorConfigs");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.LecturerEntity", b =>
                {
                    b.Navigation("ClassIndicators");

                    b.Navigation("LecturerIndicators");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.MajorEntity", b =>
                {
                    b.Navigation("Lecturers");

                    b.Navigation("MajorIndicators");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.SemesterEntity", b =>
                {
                    b.Navigation("ClassIndicators");

                    b.Navigation("LecturerIndicators");

                    b.Navigation("MajorIndicators");

                    b.Navigation("SubjectIndicators");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.SubjectEntity", b =>
                {
                    b.Navigation("ClassIndicators");

                    b.Navigation("SubjectIndicators");
                });

            modelBuilder.Entity("FPLSP_Analyst.Domain.Entities.TrainingFacilityEntity", b =>
                {
                    b.Navigation("Lecturers");
                });
#pragma warning restore 612, 618
        }
    }
}
